#导入用到的包
import matplotlib.pyplot as plt
import pygal
import numpy as py

-----------------------------------------

#最简单的折线图
x = list(range(1,10))
y = [4,1,7,5,9,6,2,8,5]
plt.plot(x, y, c='red', linewidth=2)

-----------------------------------------

#利用matplot绘制散点图
plt.scatter(x, y, c='blue')
plt.axis([0,10,0,10])
#设置刻度标记大小
plt.tick_params(axis='both', labelsize=14)
plt.xlabel("x", fontsize=14)
plt.ylabel("y", fontsize=14)
plt.show()

----------------------------------------------

#绘制散点图，其中点的颜色将随因变量y1的取值不同而发生变化
x1 = list(range(1,10))
y1 = [4,1,7,5,9,6,2,8,5]
#合理改变s的大小制作出气泡图
plt.scatter(x1, y1, c=y1, cmap=plt.cm.Reds, s=128)
plt.axis([0,10,0,10])
#改变坐标轴标号大小
plt.tick_params(axis='both', labelsize=14)
plt.xlabel("x1", fontsize=14)
plt.ylabel("y1", fontsize=14)

-----------------------------------------------

#利用matplot绘制折线图并填充中间的部分
x2 = list(range(1,10))
y2 = []
for i in x2:
    i = i**2
    y2.append(i)
plt.plot(x,y,c='red',linewidth=2)
plt.plot(x2,y2,c='green',linewidth=2)
#隐藏X轴，Y轴
#plt.axes().get_xaxis().set_visible(False)
#plt.axes().get_yaxis().set_visible(False)
#填充两条曲线中间的部分
plt.fill_between(x,y2,y,facecolor='blue',alpha=0.1)
#保存图像，必须放在打印前，否则输出为空白！
plt.savefig('fullfill_plot.svg', bbox_inches='tight')
#设置图表宽度、高度、背景色,同时打印出来
plt.figure(dpi=64, figsize=(10,6), edgecolor='black')

--------------------------------------------------

#利用pygal绘制直方图
x3 = [1,2,3,4,5,6,7,8,9]
y3 = [1,3,5,7,9,7,5,3,1]
#创建Bar实例
hist = pygal.Bar()
hist.title = "Rec with y3 and x3"
hist.x_labels = x3
hist.y_labels = y3
hist.x_title = "x"
hist.y_title = "y"
#添加数据标签
hist.add('num', x3)
#保存文件，用浏览器打开即可
hist.render_to_file('Rec_hist.svg')

-----------------------------------------------

#利用pylot绘制直方图
#生成1000个标准正态分布
y4 = np.random.randn(1000)
#bins：设置分成的组数 rwidth：方块宽度 alpha：方块透明度 density:当为True时面积求和为1
plt.hist(y4, bins=40,color="red", edgecolor="black", rwidth=0.7, alpha=0.7, density='True')
plt.xlabel("x")
plt.ylabel("y")
plt.show()

-------------------------------------------------

#利用matplot绘制条形图
y4 = np.random.rand(10)
y44 = np.random.rand(10)
x4 = list(range(1,11))
barwidth = 0.5
x_added = []
for i in x4:
    x_added.append(i + barwidth)
plt.bar(x4, y4, label='L1', color='r', width=barwidth, alpha=1)
plt.bar(x_added, y44, label='L2', color='blue', width=barwidth, alpha=1)
plt.title('Bar Figure')
plt.xlabel('x')
plt.ylabel('y')
#给图像添加图例
plt.legend()
plt.figure()

-------------------------------------------------

#利用matplot绘制饼图
labels = ['L1', 'L2', 'L3', 'L4', 'L5', 'L6']
sizes = [4, 2, 12, 60, 2, 9]
#每一块饼图离开中心的距离
explode = (0, 0, 0, 0.1, 0, 0)
#autopct：控制饼图内百分比设置，如‘%1.2f%%’指保留二位小数 starttangle：起始绘制角度 counterclock：True为逆时针，否则为顺时针
plt.pie(sizes, explode=explode, labels=labels, autopct='%1.2f%%', shadow=False, startangle=150)
plt.title("Pie Figure")
plt.show()  

------------------------------------------------------

#利用matplot绘制雷达图
values = [1, 2, 3, 4, 5]
labels = ['L1', 'L2', 'L3', 'L4', 'L5']
N = len(values)
#linspace：返回范围为0~2pi的N个均匀分布。
angels = np.linspace(0, 2*np.pi, N, endpoint=False)
#concatenate：数组拼接,此例用不到
#values = np.concatenate((values, [values[0]]))
#angels = np.concatenate((angels, [angels[0]]))
fig = plt.figure()
#作为子图的一部分，将坐标轴添加其中
ax = fig.add_subplot(1,1,1, polar=True)
ax.fill(angels, values, alpha=0.25)
#在不同位置添加标签
ax.set_thetagrids(angels*180/np.pi, labels)
#设置坐标轴范围
ax.set_ylim(0,5)
plt.title('Radio Figure')
#添加网格线
ax.grid(True)
plt.show()

-------------------------------------------

#利用matplot绘制堆叠图
x6 = list(range(1,10))
y6 = []
for i in x6:
    i = i**2
    y6.append(i)
y66 = list(100*np.random.rand(9))
labels = ['L1', 'L2', 'L3', 'L4', 'L5', 'L6', 'L7', 'L8', 'L9']
#填充两条曲线中间的部分
plt.stackplot(x6, y6, y66, labels=labels, colors=['blue', 'red'])
plt.title('Area Figure')
plt.legend()
#保存图像，必须放在打印前，否则输出为空白！
plt.savefig('fullfill_plot.svg', bbox_inches='tight')
#设置图表宽度、高度、背景色,同时打印出来
plt.figure(dpi=64, figsize=(10,6), edgecolor='black')
plt.show()


#填充热力图：略
#树地图：略

---------------------------------------------

